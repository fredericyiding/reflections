----------------------
What happens when you initialize a repository? Why do you need to do it?

When we initialize the repository, it creates a .git hidden file. This file will be used by Git later to do the version control. 

git init 
is used to initialize the repository. Only after the initialization can we track changes and do every other jobs related to git version control (e.g., git log, git status, etc).


----------------------
How is the staging area different from the working directory and the repository? What value do you think it offers?

It gives us more flexibility and control by using the STAGING AREA instead of the WORKING DIRECTORY to create the commit. We can specify exactly WHAT CHANGES TO BE COMMITTED.

----------------------
How can you use the staging area to make sure you have one commit per logical change?

The staging area acts as a butter. Instead of commit all the files in the folder, you can choose those files that have been changed and which can reflect this specific logical step.

WIthout the staging area, we would have to commit everything in the folder, which might not be clear enough, or might be more than one logical change.

----------------------
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Bascially, whenever we want to make some experimental changes, we need a branch.This includes creating new features that are experimental, or adding a new language etc.

Context switching.

Work on a new feature, work on a bug.

Keep your project organized, particularly when you share your project publicly. You have a master branch, which will be your production quality branch that never breaks, always works. Then we can keep a developing branch, experimental branch, unique feature branches. You can share these with the public, the understanding ones.
----------------------
How do the diagrams help you visualize the branch structure?

git log --graph --oneline master other_branch_name :
gives us a tree-like structure that tells us the lineage of the commits. We can easily identify the parent of each commit and trace back to the initial commit.

----------------------
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of mergin two branches is that we now have a master commit that contains the features of both branches. 
The way Git does is to compare the changes and based on whether or not the programers added/deleted/kept the lines.
The diagram gives us a better way to understand the lineage and track changes between the commit of interest with the previous commits, esp., its parent commit.

----------------------

